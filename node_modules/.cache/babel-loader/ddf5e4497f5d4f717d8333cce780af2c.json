{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\n\n\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\n\nvar Select = /*#__PURE__*/function (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(_props) {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorBlur\", function () {\n      _this.setState({\n        focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onComponentKeyDown\", function (event) {\n      var open = _this.state.open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          _this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        _this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeselect\", function (wrappedValue, node, nodeEventInfo) {\n      var onDeselect = _this.props.onDeselect;\n      if (!onDeselect) return;\n      onDeselect(wrappedValue, node, nodeEventInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorClear\", function (event) {\n      var disabled = _this.props.disabled;\n      if (disabled) return;\n\n      _this.triggerChange([], []);\n\n      if (!_this.isSearchValueControlled()) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMultipleSelectorRemove\", function (event, removeValue) {\n      event.stopPropagation();\n      var _this$state = _this.state,\n          valueList = _this$state.valueList,\n          missValueList = _this$state.missValueList,\n          valueEntities = _this$state.valueEntities;\n      var _this$props = _this.props,\n          treeCheckable = _this$props.treeCheckable,\n          treeCheckStrictly = _this$props.treeCheckStrictly,\n          treeNodeLabelProp = _this$props.treeNodeLabelProp,\n          disabled = _this$props.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref) {\n            var value = _ref.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref3) {\n          var value = _ref3.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n          var node = _ref4.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node,\n              pos = _ref5.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n            var node = _ref6.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n          var value = _ref7.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref8) {\n        var value = _ref8.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      _this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      _this.triggerChange(newMissValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onValueTrigger\", function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.props.value;\n      var _this$state2 = _this.state,\n          missValueList = _this$state2.missValueList,\n          valueEntities = _this$state2.valueEntities,\n          keyEntities = _this$state2.keyEntities,\n          searchValue = _this$state2.searchValue;\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          inputValue = _this$props2.inputValue,\n          treeNodeLabelProp = _this$props2.treeNodeLabelProp,\n          onSelect = _this$props2.onSelect,\n          onSearch = _this$props2.onSearch,\n          multiple = _this$props2.multiple,\n          treeCheckable = _this$props2.treeCheckable,\n          treeCheckStrictly = _this$props2.treeCheckStrictly,\n          autoClearSearchValue = _this$props2.autoClearSearchValue;\n      var label = node.props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        if (onSelect) {\n          onSelect(wrappedValue, node, nodeEventInfo);\n        }\n      } else {\n        _this.onDeselect(wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (_ref9) {\n        var props = _ref9.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = keyEntities[key].node.props;\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!_this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          _this.setUncontrolledState({\n            searchValue: '',\n            filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (onSearch && searchValue && searchValue.length) {\n          onSearch('');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _objectSpread({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      _this.triggerChange(missValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeSelect\", function (_, nodeEventInfo) {\n      var _this$state3 = _this.state,\n          valueList = _this$state3.valueList,\n          valueEntities = _this$state3.valueEntities;\n      var _this$props3 = _this.props,\n          treeCheckable = _this$props3.treeCheckable,\n          multiple = _this$props3.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        _this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      _this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeCheck\", function (_, nodeEventInfo) {\n      var _this$state4 = _this.state,\n          searchValue = _this$state4.searchValue,\n          keyEntities = _this$state4.keyEntities,\n          valueEntities = _this$state4.valueEntities,\n          valueList = _this$state4.valueList;\n      var treeCheckStrictly = _this.props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n            var value = _ref16.props.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities[key].node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities[key]);\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      _this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDropdownVisibleChange\", function (open) {\n      var _this$props4 = _this.props,\n          multiple = _this$props4.multiple,\n          treeCheckable = _this$props4.treeCheckable;\n      var searchValue = _this.state.searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && searchValue) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      _this.setOpenState(open, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputChange\", function (_ref17) {\n      var value = _ref17.target.value;\n      var _this$state5 = _this.state,\n          treeNodes = _this$state5.treeNodes,\n          valueEntities = _this$state5.valueEntities;\n      var _this$props5 = _this.props,\n          onSearch = _this$props5.onSearch,\n          filterTreeNode = _this$props5.filterTreeNode,\n          treeNodeFilterProp = _this$props5.treeNodeFilterProp;\n\n      if (onSearch) {\n        onSearch(value);\n      }\n\n      var isSet = false;\n\n      if (!_this.isSearchValueControlled()) {\n        isSet = _this.setUncontrolledState({\n          searchValue: value\n        });\n\n        _this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        _this.setState({\n          filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputKeyDown\", function (event) {\n      var _this$state6 = _this.state,\n          searchValue = _this$state6.searchValue,\n          valueList = _this$state6.valueList;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && _this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n\n        _this.onMultipleSelectorRemove(event, lastValue);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChoiceAnimationLeave\", function () {\n      raf(function () {\n        _this.forcePopupAlign();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPopupRef\", function (popup) {\n      _this.popup = popup;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setUncontrolledState\", function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n\n      return needSync;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setOpenState\", function (open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var onDropdownVisibleChange = _this.props.onDropdownVisibleChange;\n\n      if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      _this.setUncontrolledState({\n        open: open\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isMultiple\", function () {\n      var _this$props6 = _this.props,\n          multiple = _this$props6.multiple,\n          treeCheckable = _this$props6.treeCheckable;\n      return !!(multiple || treeCheckable);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isLabelInValue\", function () {\n      return isLabelInValue(_this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSearchValueControlled\", function () {\n      var inputValue = _this.props.inputValue;\n      if ('searchValue' in _this.props) return true;\n      return 'inputValue' in _this.props && inputValue !== null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"forcePopupAlign\", function () {\n      var $trigger = _this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delayForcePopupAlign\", function () {\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this.forcePopupAlign);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerChange\", function (missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$state7 = _this.state,\n          valueEntities = _this$state7.valueEntities,\n          searchValue = _this$state7.searchValue,\n          prevSelectorValueList = _this$state7.selectorValueList;\n      var _this$props7 = _this.props,\n          onChange = _this$props7.onChange,\n          disabled = _this$props7.disabled,\n          treeCheckable = _this$props7.treeCheckable,\n          treeCheckStrictly = _this$props7.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _objectSpread({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref18) {\n          var label = _ref18.label,\n              value = _ref18.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, _this.props, valueEntities);\n\n      if (!('value' in _this.props)) {\n        var newState = {\n          missValueList: missValueList,\n          valueList: valueList,\n          selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        _this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (onChange) {\n        var connectValueList; // Get value by mode\n\n        if (_this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (_this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref19) {\n            var label = _ref19.label,\n                value = _ref19.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref20) {\n            var label = _ref20.label,\n                value = _ref20.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!_this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        onChange(returnValue, labelList, extra);\n      }\n    });\n\n    var prefixAria = _props.prefixAria,\n        defaultOpen = _props.defaultOpen,\n        _open = _props.open;\n    _this.state = {\n      open: _open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props8 = this.props,\n          autoFocus = _this$props8.autoFocus,\n          disabled = _this$props8.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var _this2 = this;\n\n      var prefixCls = this.props.prefixCls;\n      var _this$state8 = this.state,\n          valueList = _this$state8.valueList,\n          open = _this$state8.open,\n          selectorValueList = _this$state8.selectorValueList,\n          valueEntities = _this$state8.valueEntities;\n      var isMultiple = this.isMultiple();\n\n      if (prevState.valueList !== valueList) {\n        this.forcePopupAlign();\n      } // Scroll to value position, only need sync on single mode\n\n\n      if (!isMultiple && selectorValueList.length && !prevState.open && open && this.popup) {\n        var value = selectorValueList[0].value;\n\n        var _this$popup$getTree = this.popup.getTree(),\n            domTreeNodes = _this$popup$getTree.domTreeNodes;\n\n        var _ref21 = valueEntities[value] || {},\n            key = _ref21.key;\n\n        var treeNode = domTreeNodes[key];\n\n        if (treeNode) {\n          var domNode = findDOMNode(treeNode);\n          raf(function () {\n            var popupNode = findDOMNode(_this2.popup);\n            var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n            var searchNode = _this2.popup.searchRef.current;\n\n            if (domNode && triggerContainer && searchNode) {\n              scrollIntoView(domNode, triggerContainer, {\n                onlyScrollIfNeeded: true,\n                offsetTop: searchNode.offsetHeight\n              });\n            }\n          });\n        }\n      }\n    } // ==================== Selector ====================\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state9 = this.state,\n          valueList = _this$state9.valueList,\n          missValueList = _this$state9.missValueList,\n          selectorValueList = _this$state9.selectorValueList,\n          searchHalfCheckedKeys = _this$state9.searchHalfCheckedKeys,\n          valueEntities = _this$state9.valueEntities,\n          keyEntities = _this$state9.keyEntities,\n          searchValue = _this$state9.searchValue,\n          open = _this$state9.open,\n          focused = _this$state9.focused,\n          treeNodes = _this$state9.treeNodes,\n          filteredTreeNodes = _this$state9.filteredTreeNodes;\n      var _this$props9 = this.props,\n          prefixCls = _this$props9.prefixCls,\n          treeExpandedKeys = _this$props9.treeExpandedKeys,\n          onTreeExpand = _this$props9.onTreeExpand;\n      var isMultiple = this.isMultiple();\n\n      var passProps = _objectSpread({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n        ariaId: this.ariaId\n      });\n\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({\n        ref: this.setPopupRef\n      }, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState.valueList = checkedKeys.map(function (key) {\n            var val = (newState.keyEntities || prevState.keyEntities)[key].value;\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\n_defineProperty(Select, \"propTypes\", {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.node,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n});\n\n_defineProperty(Select, \"childContextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes, {}, multipleSelectorContextTypes, {}, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n});\n\n_defineProperty(Select, \"defaultProps\", {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n});\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","toString","Array","from","isArray","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","p","obj","React","findDOMNode","PropTypes","polyfill","KeyCode","shallowEqual","raf","scrollIntoView","SelectTrigger","selectorContextTypes","popupContextTypes","SingleSelector","MultipleSelector","multipleSelectorContextTypes","SinglePopup","MultiplePopup","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","getFilterTree","cleanEntity","findPopupContainer","valueProp","SelectNode","Select","_React$Component","_props","_this","setState","focused","event","open","state","keyCode","ENTER","DOWN","indexOf","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","wrappedValue","node","nodeEventInfo","onDeselect","disabled","triggerChange","isSearchValueControlled","setUncontrolledState","searchValue","filteredTreeNodes","removeValue","_this$state","valueList","missValueList","valueEntities","_this$props","treeCheckable","treeCheckStrictly","treeNodeLabelProp","triggerEntity","newValueList","_ref","entity","pos","_ref2","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","map","_ref3","checked","checkedNodes","_ref4","checkedNodesPositions","_ref5","allCheckedNodes","_ref6","selected","selectedNodes","_ref7","newMissValueList","_ref8","label","isAdd","nodeList","nodeExtraInfo","_this$state2","keyEntities","_this$props2","inputValue","onSelect","onSearch","multiple","autoClearSearchValue","_ref9","keyList","_ref10","val","checkedKeys","_","_this$state3","_this$props3","selectedValue","_ref11","_ref12","_ref13","onValueTrigger","_this$state4","checkedNodeList","oriKeyList","_ref14","_ref15","Set","concat","_ref16","eventKey","_this$props4","_ref17","_this$state5","treeNodes","_this$props5","filterTreeNode","treeNodeFilterProp","isSet","upperSearchValue","String","toUpperCase","filterTreeNodeFn","nodeValue","_this$state6","BACKSPACE","isMultiple","lastValue","onMultipleSelectorRemove","forcePopupAlign","popup","needSync","newState","name","byTrigger","undefined","onDropdownVisibleChange","documentClickClose","_this$props6","$trigger","selectTriggerRef","current","_this$state7","prevSelectorValueList","selectorValueList","_this$props7","onChange","extra","preValue","_ref18","searchHalfCheckedKeys","connectValueList","slice","labelList","returnValue","_ref19","_ref20","prefixAria","defaultOpen","_open","init","selectorRef","ariaId","getChildContext","rcTreeSelect","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","componentDidMount","_this$props8","autoFocus","focus","componentDidUpdate","prevState","_this2","prefixCls","_this$state8","_this$popup$getTree","getTree","domTreeNodes","_ref21","treeNode","domNode","popupNode","triggerContainer","searchNode","searchRef","onlyScrollIfNeeded","offsetTop","offsetHeight","blur","render","_this$state9","_this$props9","treeExpandedKeys","onTreeExpand","passProps","onChoiceAnimationLeave","dropdownPrefixCls","Popup","$popup","createElement","ref","setPopupRef","onTreeExpanded","delayForcePopupAlign","Selector","$selector","popupElement","onKeyDown","getDerivedStateFromProps","nextProps","_prevState$prevProps","prevProps","treeDataSimpleMode","processState","propName","updater","valueRefresh","propValue","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","treeData","entitiesMap","posEntities","filteredValueList","latestValueList","valueLabels","wrapperValue","_conductCheck","Component","string","bool","showArrow","defaultValue","showSearch","placeholder","searchPlaceholder","children","labelInValue","maxTagCount","number","maxTagPlaceholder","oneOfType","func","maxTagTextLength","showCheckedStrategy","oneOf","dropdownMatchSelectWidth","array","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","loadData","notFoundContent","inputIcon","clearIcon","removeIcon","switcherIcon","shape","TreeNode","displayName"],"sources":["/Users/boyuxu/IdeaProjects/laoOffer/starlink/node_modules/rc-tree-select/es/Select.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\n\nvar Select =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(_props) {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorBlur\", function () {\n      _this.setState({\n        focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onComponentKeyDown\", function (event) {\n      var open = _this.state.open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          _this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        _this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeselect\", function (wrappedValue, node, nodeEventInfo) {\n      var onDeselect = _this.props.onDeselect;\n      if (!onDeselect) return;\n      onDeselect(wrappedValue, node, nodeEventInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorClear\", function (event) {\n      var disabled = _this.props.disabled;\n      if (disabled) return;\n\n      _this.triggerChange([], []);\n\n      if (!_this.isSearchValueControlled()) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMultipleSelectorRemove\", function (event, removeValue) {\n      event.stopPropagation();\n      var _this$state = _this.state,\n          valueList = _this$state.valueList,\n          missValueList = _this$state.missValueList,\n          valueEntities = _this$state.valueEntities;\n      var _this$props = _this.props,\n          treeCheckable = _this$props.treeCheckable,\n          treeCheckStrictly = _this$props.treeCheckStrictly,\n          treeNodeLabelProp = _this$props.treeNodeLabelProp,\n          disabled = _this$props.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref) {\n            var value = _ref.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref3) {\n          var value = _ref3.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n          var node = _ref4.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node,\n              pos = _ref5.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n            var node = _ref6.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n          var value = _ref7.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref8) {\n        var value = _ref8.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      _this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      _this.triggerChange(newMissValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onValueTrigger\", function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.props.value;\n      var _this$state2 = _this.state,\n          missValueList = _this$state2.missValueList,\n          valueEntities = _this$state2.valueEntities,\n          keyEntities = _this$state2.keyEntities,\n          searchValue = _this$state2.searchValue;\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          inputValue = _this$props2.inputValue,\n          treeNodeLabelProp = _this$props2.treeNodeLabelProp,\n          onSelect = _this$props2.onSelect,\n          onSearch = _this$props2.onSearch,\n          multiple = _this$props2.multiple,\n          treeCheckable = _this$props2.treeCheckable,\n          treeCheckStrictly = _this$props2.treeCheckStrictly,\n          autoClearSearchValue = _this$props2.autoClearSearchValue;\n      var label = node.props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        if (onSelect) {\n          onSelect(wrappedValue, node, nodeEventInfo);\n        }\n      } else {\n        _this.onDeselect(wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (_ref9) {\n        var props = _ref9.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = keyEntities[key].node.props;\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!_this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          _this.setUncontrolledState({\n            searchValue: '',\n            filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (onSearch && searchValue && searchValue.length) {\n          onSearch('');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _objectSpread({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      _this.triggerChange(missValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeSelect\", function (_, nodeEventInfo) {\n      var _this$state3 = _this.state,\n          valueList = _this$state3.valueList,\n          valueEntities = _this$state3.valueEntities;\n      var _this$props3 = _this.props,\n          treeCheckable = _this$props3.treeCheckable,\n          multiple = _this$props3.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        _this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      _this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeCheck\", function (_, nodeEventInfo) {\n      var _this$state4 = _this.state,\n          searchValue = _this$state4.searchValue,\n          keyEntities = _this$state4.keyEntities,\n          valueEntities = _this$state4.valueEntities,\n          valueList = _this$state4.valueList;\n      var treeCheckStrictly = _this.props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n            var value = _ref16.props.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities[key].node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities[key]);\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      _this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDropdownVisibleChange\", function (open) {\n      var _this$props4 = _this.props,\n          multiple = _this$props4.multiple,\n          treeCheckable = _this$props4.treeCheckable;\n      var searchValue = _this.state.searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && searchValue) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      _this.setOpenState(open, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputChange\", function (_ref17) {\n      var value = _ref17.target.value;\n      var _this$state5 = _this.state,\n          treeNodes = _this$state5.treeNodes,\n          valueEntities = _this$state5.valueEntities;\n      var _this$props5 = _this.props,\n          onSearch = _this$props5.onSearch,\n          filterTreeNode = _this$props5.filterTreeNode,\n          treeNodeFilterProp = _this$props5.treeNodeFilterProp;\n\n      if (onSearch) {\n        onSearch(value);\n      }\n\n      var isSet = false;\n\n      if (!_this.isSearchValueControlled()) {\n        isSet = _this.setUncontrolledState({\n          searchValue: value\n        });\n\n        _this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        _this.setState({\n          filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputKeyDown\", function (event) {\n      var _this$state6 = _this.state,\n          searchValue = _this$state6.searchValue,\n          valueList = _this$state6.valueList;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && _this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n\n        _this.onMultipleSelectorRemove(event, lastValue);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChoiceAnimationLeave\", function () {\n      raf(function () {\n        _this.forcePopupAlign();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPopupRef\", function (popup) {\n      _this.popup = popup;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setUncontrolledState\", function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n\n      return needSync;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setOpenState\", function (open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var onDropdownVisibleChange = _this.props.onDropdownVisibleChange;\n\n      if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      _this.setUncontrolledState({\n        open: open\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isMultiple\", function () {\n      var _this$props6 = _this.props,\n          multiple = _this$props6.multiple,\n          treeCheckable = _this$props6.treeCheckable;\n      return !!(multiple || treeCheckable);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isLabelInValue\", function () {\n      return isLabelInValue(_this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSearchValueControlled\", function () {\n      var inputValue = _this.props.inputValue;\n      if ('searchValue' in _this.props) return true;\n      return 'inputValue' in _this.props && inputValue !== null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"forcePopupAlign\", function () {\n      var $trigger = _this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delayForcePopupAlign\", function () {\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this.forcePopupAlign);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerChange\", function (missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$state7 = _this.state,\n          valueEntities = _this$state7.valueEntities,\n          searchValue = _this$state7.searchValue,\n          prevSelectorValueList = _this$state7.selectorValueList;\n      var _this$props7 = _this.props,\n          onChange = _this$props7.onChange,\n          disabled = _this$props7.disabled,\n          treeCheckable = _this$props7.treeCheckable,\n          treeCheckStrictly = _this$props7.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _objectSpread({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref18) {\n          var label = _ref18.label,\n              value = _ref18.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, _this.props, valueEntities);\n\n      if (!('value' in _this.props)) {\n        var newState = {\n          missValueList: missValueList,\n          valueList: valueList,\n          selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        _this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (onChange) {\n        var connectValueList; // Get value by mode\n\n        if (_this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (_this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref19) {\n            var label = _ref19.label,\n                value = _ref19.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref20) {\n            var label = _ref20.label,\n                value = _ref20.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!_this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        onChange(returnValue, labelList, extra);\n      }\n    });\n\n    var prefixAria = _props.prefixAria,\n        defaultOpen = _props.defaultOpen,\n        _open = _props.open;\n    _this.state = {\n      open: _open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props8 = this.props,\n          autoFocus = _this$props8.autoFocus,\n          disabled = _this$props8.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var _this2 = this;\n\n      var prefixCls = this.props.prefixCls;\n      var _this$state8 = this.state,\n          valueList = _this$state8.valueList,\n          open = _this$state8.open,\n          selectorValueList = _this$state8.selectorValueList,\n          valueEntities = _this$state8.valueEntities;\n      var isMultiple = this.isMultiple();\n\n      if (prevState.valueList !== valueList) {\n        this.forcePopupAlign();\n      } // Scroll to value position, only need sync on single mode\n\n\n      if (!isMultiple && selectorValueList.length && !prevState.open && open && this.popup) {\n        var value = selectorValueList[0].value;\n\n        var _this$popup$getTree = this.popup.getTree(),\n            domTreeNodes = _this$popup$getTree.domTreeNodes;\n\n        var _ref21 = valueEntities[value] || {},\n            key = _ref21.key;\n\n        var treeNode = domTreeNodes[key];\n\n        if (treeNode) {\n          var domNode = findDOMNode(treeNode);\n          raf(function () {\n            var popupNode = findDOMNode(_this2.popup);\n            var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n            var searchNode = _this2.popup.searchRef.current;\n\n            if (domNode && triggerContainer && searchNode) {\n              scrollIntoView(domNode, triggerContainer, {\n                onlyScrollIfNeeded: true,\n                offsetTop: searchNode.offsetHeight\n              });\n            }\n          });\n        }\n      }\n    } // ==================== Selector ====================\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state9 = this.state,\n          valueList = _this$state9.valueList,\n          missValueList = _this$state9.missValueList,\n          selectorValueList = _this$state9.selectorValueList,\n          searchHalfCheckedKeys = _this$state9.searchHalfCheckedKeys,\n          valueEntities = _this$state9.valueEntities,\n          keyEntities = _this$state9.keyEntities,\n          searchValue = _this$state9.searchValue,\n          open = _this$state9.open,\n          focused = _this$state9.focused,\n          treeNodes = _this$state9.treeNodes,\n          filteredTreeNodes = _this$state9.filteredTreeNodes;\n      var _this$props9 = this.props,\n          prefixCls = _this$props9.prefixCls,\n          treeExpandedKeys = _this$props9.treeExpandedKeys,\n          onTreeExpand = _this$props9.onTreeExpand;\n      var isMultiple = this.isMultiple();\n\n      var passProps = _objectSpread({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n        ariaId: this.ariaId\n      });\n\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({\n        ref: this.setPopupRef\n      }, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState.valueList = checkedKeys.map(function (key) {\n            var val = (newState.keyEntities || prevState.keyEntities)[key].value;\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\n_defineProperty(Select, \"propTypes\", {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.node,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n});\n\n_defineProperty(Select, \"childContextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes, {}, multipleSelectorContextTypes, {}, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n});\n\n_defineProperty(Select, \"defaultProps\", {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n});\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;"],"mappings":"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"},"metadata":{},"sourceType":"module"}