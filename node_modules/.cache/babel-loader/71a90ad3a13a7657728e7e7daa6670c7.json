{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport warning from 'warning';\nimport { convertDataToTree as rcConvertDataToTree, convertTreeToEntities as rcConvertTreeToEntities, conductCheck as rcConductCheck } from \"rc-tree/es/util\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport { hasClass } from \"rc-util/es/Dom/class\";\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n} // Shallow copy of React 16.3 createRef api\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _objectSpread({}, entity, {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n *\n * We pass `Component` as argument is to fix eslint issue.\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities, Component) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = toNodeArray(node.props.children).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return React.createElement(Component, _extends({}, node.props, {\n        key: valueEntities[node.props.value].key\n      }), children);\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var value = _ref4.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var value = _ref5.node.props.value,\n            children = _ref5.children;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      key = props.key,\n      value = props.value;\n\n  var cloneProps = _objectSpread({}, props); // Warning user not to use deprecated label prop.\n\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    cloneProps.title = label;\n  }\n\n  if (!key) {\n    cloneProps.key = value;\n  }\n\n  return cloneProps;\n}\n\nexport function convertDataToTree(treeData) {\n  return rcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _objectSpread({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = entity.node.props.value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return rcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","React","warning","convertDataToTree","rcConvertDataToTree","convertTreeToEntities","rcConvertTreeToEntities","conductCheck","rcConductCheck","toNodeArray","hasClass","SHOW_CHILD","SHOW_PARENT","warnDeprecatedLabel","findPopupContainer","node","prefixClass","current","parentNode","toTitle","title","toArray","data","undefined","Array","isArray","createRef","func","setRef","UNSELECTABLE_STYLE","userSelect","WebkitUserSelect","UNSELECTABLE_ATTRIBUTE","unselectable","flatToHierarchy","positionList","entrances","posMap","parsedList","slice","map","entity","clone","fields","pos","split","children","sort","a","b","parentPos","join","parentEntity","ariaId","resetAriaId","generateAriaId","prefix","concat","isLabelInValue","props","treeCheckable","treeCheckStrictly","labelInValue","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","parentKey","parent","isPosRelated","pos1","pos2","fields1","fields2","minLen","Math","min","cleanEntity","_ref2","instance","getFilterTree","treeNodes","searchValue","filterFunc","valueEntities","Component","mapFilteredNodeToData","match","n","createElement","formatInternalValue","valueList","val","label","getLabel","wrappedValue","treeNodeLabelProp","formatSelectorValue","showCheckedStrategy","values","hierarchyList","_ref3","_ref4","targetValueList","traverse","_ref5","processProps","cloneProps","initWrapper","wrapper","processEntity","currentEntity","getHalfCheckedKeys","_ref6","_ref7","parentValue"],"sources":["/Users/boyuxu/IdeaProjects/laoOffer/starlink/node_modules/rc-tree-select/es/util.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport warning from 'warning';\nimport { convertDataToTree as rcConvertDataToTree, convertTreeToEntities as rcConvertTreeToEntities, conductCheck as rcConductCheck } from \"rc-tree/es/util\";\nimport toNodeArray from \"rc-util/es/Children/toArray\";\nimport { hasClass } from \"rc-util/es/Dom/class\";\nimport { SHOW_CHILD, SHOW_PARENT } from './strategies';\nvar warnDeprecatedLabel = false; // =================== DOM =====================\n\nexport function findPopupContainer(node, prefixClass) {\n  var current = node;\n\n  while (current) {\n    if (hasClass(current, prefixClass)) {\n      return current;\n    }\n\n    current = current.parentNode;\n  }\n\n  return null;\n} // =================== MISC ====================\n\nexport function toTitle(title) {\n  if (typeof title === 'string') {\n    return title;\n  }\n\n  return null;\n}\nexport function toArray(data) {\n  if (data === undefined || data === null) return [];\n  return Array.isArray(data) ? data : [data];\n} // Shallow copy of React 16.3 createRef api\n\nexport function createRef() {\n  var func = function setRef(node) {\n    func.current = node;\n  };\n\n  return func;\n} // =============== Legacy ===============\n\nexport var UNSELECTABLE_STYLE = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none'\n};\nexport var UNSELECTABLE_ATTRIBUTE = {\n  unselectable: 'unselectable'\n};\n/**\n * Convert position list to hierarchy structure.\n * This is little hack since use '-' to split the position.\n */\n\nexport function flatToHierarchy(positionList) {\n  if (!positionList.length) {\n    return [];\n  }\n\n  var entrances = {}; // Prepare the position map\n\n  var posMap = {};\n  var parsedList = positionList.slice().map(function (entity) {\n    var clone = _objectSpread({}, entity, {\n      fields: entity.pos.split('-')\n    });\n\n    delete clone.children;\n    return clone;\n  });\n  parsedList.forEach(function (entity) {\n    posMap[entity.pos] = entity;\n  });\n  parsedList.sort(function (a, b) {\n    return a.fields.length - b.fields.length;\n  }); // Create the hierarchy\n\n  parsedList.forEach(function (entity) {\n    var parentPos = entity.fields.slice(0, -1).join('-');\n    var parentEntity = posMap[parentPos];\n\n    if (!parentEntity) {\n      entrances[entity.pos] = entity;\n    } else {\n      parentEntity.children = parentEntity.children || [];\n      parentEntity.children.push(entity);\n    } // Some time position list provide `key`, we don't need it\n\n\n    delete entity.key;\n    delete entity.fields;\n  });\n  return Object.keys(entrances).map(function (key) {\n    return entrances[key];\n  });\n} // =============== Accessibility ===============\n\nvar ariaId = 0;\nexport function resetAriaId() {\n  ariaId = 0;\n}\nexport function generateAriaId(prefix) {\n  ariaId += 1;\n  return \"\".concat(prefix, \"_\").concat(ariaId);\n}\nexport function isLabelInValue(props) {\n  var treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      labelInValue = props.labelInValue;\n\n  if (treeCheckable && treeCheckStrictly) {\n    return true;\n  }\n\n  return labelInValue || false;\n} // =================== Tree ====================\n\nexport function parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Detect if position has relation.\n * e.g. 1-2 related with 1-2-3\n * e.g. 1-3-2 related with 1\n * e.g. 1-2 not related with 1-21\n */\n\nexport function isPosRelated(pos1, pos2) {\n  var fields1 = pos1.split('-');\n  var fields2 = pos2.split('-');\n  var minLen = Math.min(fields1.length, fields2.length);\n\n  for (var i = 0; i < minLen; i += 1) {\n    if (fields1[i] !== fields2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * This function is only used on treeNode check (none treeCheckStrictly but has searchInput).\n * We convert entity to { node, pos, children } format.\n * This is legacy bug but we still need to do with it.\n * @param entity\n */\n\nexport function cleanEntity(_ref2) {\n  var node = _ref2.node,\n      pos = _ref2.pos,\n      children = _ref2.children;\n  var instance = {\n    node: node,\n    pos: pos\n  };\n\n  if (children) {\n    instance.children = children.map(cleanEntity);\n  }\n\n  return instance;\n}\n/**\n * Get a filtered TreeNode list by provided treeNodes.\n * [Legacy] Since `Tree` use `key` as map but `key` will changed by React,\n * we have to convert `treeNodes > data > treeNodes` to keep the key.\n * Such performance hungry!\n *\n * We pass `Component` as argument is to fix eslint issue.\n */\n\nexport function getFilterTree(treeNodes, searchValue, filterFunc, valueEntities, Component) {\n  if (!searchValue) {\n    return null;\n  }\n\n  function mapFilteredNodeToData(node) {\n    if (!node) return null;\n    var match = false;\n\n    if (filterFunc(searchValue, node)) {\n      match = true;\n    }\n\n    var children = toNodeArray(node.props.children).map(mapFilteredNodeToData).filter(function (n) {\n      return n;\n    });\n\n    if (children.length || match) {\n      return React.createElement(Component, _extends({}, node.props, {\n        key: valueEntities[node.props.value].key\n      }), children);\n    }\n\n    return null;\n  }\n\n  return treeNodes.map(mapFilteredNodeToData).filter(function (node) {\n    return node;\n  });\n} // =================== Value ===================\n\n/**\n * Convert value to array format to make logic simplify.\n */\n\nexport function formatInternalValue(value, props) {\n  var valueList = toArray(value); // Parse label in value\n\n  if (isLabelInValue(props)) {\n    return valueList.map(function (val) {\n      if (typeof val !== 'object' || !val) {\n        return {\n          value: '',\n          label: ''\n        };\n      }\n\n      return val;\n    });\n  }\n\n  return valueList.map(function (val) {\n    return {\n      value: val\n    };\n  });\n}\nexport function getLabel(wrappedValue, entity, treeNodeLabelProp) {\n  if (wrappedValue.label) {\n    return wrappedValue.label;\n  }\n\n  if (entity && entity.node.props) {\n    return entity.node.props[treeNodeLabelProp];\n  } // Since value without entity will be in missValueList.\n  // This code will never reached, but we still need this in case.\n\n\n  return wrappedValue.value;\n}\n/**\n * Convert internal state `valueList` to user needed value list.\n * This will return an array list. You need check if is not multiple when return.\n *\n * `allCheckedNodes` is used for `treeCheckStrictly`\n */\n\nexport function formatSelectorValue(valueList, props, valueEntities) {\n  var treeNodeLabelProp = props.treeNodeLabelProp,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      showCheckedStrategy = props.showCheckedStrategy; // Will hide some value if `showCheckedStrategy` is set\n\n  if (treeCheckable && !treeCheckStrictly) {\n    var values = {};\n    valueList.forEach(function (wrappedValue) {\n      values[wrappedValue.value] = wrappedValue;\n    });\n    var hierarchyList = flatToHierarchy(valueList.map(function (_ref3) {\n      var value = _ref3.value;\n      return valueEntities[value];\n    }));\n\n    if (showCheckedStrategy === SHOW_PARENT) {\n      // Only get the parent checked value\n      return hierarchyList.map(function (_ref4) {\n        var value = _ref4.node.props.value;\n        return {\n          label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n          value: value\n        };\n      });\n    }\n\n    if (showCheckedStrategy === SHOW_CHILD) {\n      // Only get the children checked value\n      var targetValueList = []; // Find the leaf children\n\n      var traverse = function traverse(_ref5) {\n        var value = _ref5.node.props.value,\n            children = _ref5.children;\n\n        if (!children || children.length === 0) {\n          targetValueList.push({\n            label: getLabel(values[value], valueEntities[value], treeNodeLabelProp),\n            value: value\n          });\n          return;\n        }\n\n        children.forEach(function (entity) {\n          traverse(entity);\n        });\n      };\n\n      hierarchyList.forEach(function (entity) {\n        traverse(entity);\n      });\n      return targetValueList;\n    }\n  }\n\n  return valueList.map(function (wrappedValue) {\n    return {\n      label: getLabel(wrappedValue, valueEntities[wrappedValue.value], treeNodeLabelProp),\n      value: wrappedValue.value\n    };\n  });\n}\n/**\n * Use `rc-tree` convertDataToTree to convert treeData to TreeNodes.\n * This will change the label to title value\n */\n\nfunction processProps(props) {\n  var title = props.title,\n      label = props.label,\n      key = props.key,\n      value = props.value;\n\n  var cloneProps = _objectSpread({}, props); // Warning user not to use deprecated label prop.\n\n\n  if (label && !title) {\n    if (!warnDeprecatedLabel) {\n      warning(false, \"'label' in treeData is deprecated. Please use 'title' instead.\");\n      warnDeprecatedLabel = true;\n    }\n\n    cloneProps.title = label;\n  }\n\n  if (!key) {\n    cloneProps.key = value;\n  }\n\n  return cloneProps;\n}\n\nexport function convertDataToTree(treeData) {\n  return rcConvertDataToTree(treeData, {\n    processProps: processProps\n  });\n}\n/**\n * Use `rc-tree` convertTreeToEntities for entities calculation.\n * We have additional entities of `valueEntities`\n */\n\nfunction initWrapper(wrapper) {\n  return _objectSpread({}, wrapper, {\n    valueEntities: {}\n  });\n}\n\nfunction processEntity(entity, wrapper) {\n  var value = entity.node.props.value;\n  entity.value = value; // This should be empty, or will get error message.\n\n  var currentEntity = wrapper.valueEntities[value];\n\n  if (currentEntity) {\n    warning(false, \"Conflict! value of node '\".concat(entity.key, \"' (\").concat(value, \") has already used by node '\").concat(currentEntity.key, \"'.\"));\n  }\n\n  wrapper.valueEntities[value] = entity;\n}\n\nexport function convertTreeToEntities(treeNodes) {\n  return rcConvertTreeToEntities(treeNodes, {\n    initWrapper: initWrapper,\n    processEntity: processEntity\n  });\n}\n/**\n * https://github.com/ant-design/ant-design/issues/13328\n * We need calculate the half check key when searchValue is set.\n */\n// TODO: This logic may better move to rc-tree\n\nexport function getHalfCheckedKeys(valueList, valueEntities) {\n  var values = {}; // Fill checked keys\n\n  valueList.forEach(function (_ref6) {\n    var value = _ref6.value;\n    values[value] = false;\n  }); // Fill half checked keys\n\n  valueList.forEach(function (_ref7) {\n    var value = _ref7.value;\n    var current = valueEntities[value];\n\n    while (current && current.parent) {\n      var parentValue = current.parent.value;\n      if (parentValue in values) break;\n      values[parentValue] = true;\n      current = current.parent;\n    }\n  }); // Get half keys\n\n  return Object.keys(values).filter(function (value) {\n    return values[value];\n  }).map(function (value) {\n    return valueEntities[value].key;\n  });\n}\nexport var conductCheck = rcConductCheck;"],"mappings":"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"},"metadata":{},"sourceType":"module"}